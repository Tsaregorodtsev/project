//Kasutatud kogumeid
#include <MD_Parola.h>
#include <MD_MAX72xx.h>
#include <SPI.h>
#include <EEPROM.h>

// BT interface serial interface
#define USE_ALTSOFTSERIAL 0

#if USE_ALTSOFTSERIAL
#include <AltSoftSerial.h>
#else
#include <SoftwareSerial.h>
#endif

//Võetud kasutusel Arduino pinnid
#define MAX_DEVICES 8
#define CLK_PIN   13
#define DATA_PIN  11
#define CS_PIN    10

//Võetud kasutusel Bluetooth pinnid
const uint8_t BT_RECV_PIN = 3;   // Arduino receive -> Bluetooth TxD pin
const uint8_t BT_SEND_PIN = 2;   // Arduino send -> Bluetooth RxD pin
const char BT_NAME[] = "Parola";

//Bluetooth moodulite mudel

#define HW_USE_HC06  1

#if HW_USE_HC06
const char *szEnd   = "\r\n";
const char PROGMEM ATCmd[] = {"NAME\0\0"};
#endif


#define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))
#define BUF_SIZE  100     // message buffer size
#define EEPROM_START_ADDR 0  // EEPROM address for setup info

#define DEBUG 0

#if DEBUG
#define PRINT(s, x) { Serial.print(F(s)); Serial.print(x); }
#define PRINTS(x) Serial.print(F(x))
#define PRINTX(x) Serial.println(x, HEX)
#else
#define PRINT(s, x)
#define PRINTS(x)
#define PRINTX(x)
#endif


//Effektide konstant määramine et pärast need oli võimalus kutsetada

const uint16_t BT_COMMS_TIMEOUT = 1000; 

const char VT_START = '*';    
const char VT_END   = '~';    
const char VT_ESC   = '#';    

const char VT_CMD_SPEED   = 'S'; 
const char VT_CMD_BRIGHT  = 'B'; 
const char VT_CMD_RESET   = 'R'; 
const char VT_CMD_FACSET  = 'F'; 
const char VT_CMD_SAVE    = 'W'; 
const char VT_CMD_MESSAGE = 'M'; 
const char VT_CMD_JUSTIFY = 'J'; 
const char VT_CMD_TPAUSE  = 'P'; 
const char VT_CMD_IANIM   = 'I'; 

const char VT_CMD_ACK  = 'Z';  
const char VT_ERR_OK   = '0';  
const char VT_ERR_TOUT = '1';  
const char VT_ERR_CMD  = '2'; 
const char VT_ERR_DATA = '3';  
const char VT_ERR_SEQ  = '4';  
const char *szStart = "AT+";


// Effektid
// Effektid kutsutakse läbi MD_Parola.h kogum.


const textPosition_t textPosition[] = { PA_LEFT, PA_CENTER, PA_RIGHT };
const textEffect_t textEffect[] = 
{
  PA_PRINT, PA_SCROLL_UP, PA_SCROLL_LEFT, PA_SCROLL_RIGHT, PA_SCROLL_DOWN,
#if ENA_SCR_DIA
  PA_SCROLL_UP_LEFT, PA_SCROLL_UP_RIGHT, PA_SCROLL_DOWN_LEFT, PA_SCROLL_DOWN_RIGHT,
#endif // ENA_SCR_DIA
#if ENA_WIPE
  PA_WIPE, PA_WIPE_CURSOR,
#endif  // ENA_WIPES
#if ENA_OPNCLS
  PA_OPENING, PA_OPENING_CURSOR, PA_CLOSING, PA_CLOSING_CURSOR, 
#endif // ENA_OPNCLS
#if ENA_GROW
  PA_GROW_UP, PA_GROW_DOWN, 
#endif // ENA_GROW
#if ENA_MISC
  PA_SLICE, PA_MESH, PA_FADE, PA_DISSOLVE, PA_BLINDS, PA_RANDOM,
#endif //ENA_MISC
#if ENA_SCAN
  PA_SCAN_HORIZ, PA_SCAN_VERT,
#endif // ENA_SCAN
};


MD_Parola P = MD_Parola(CS_PIN, MAX_DEVICES);


#if USE_ALTSOFTSERIAL
AltSoftSerial BTChan = AltSoftSerial();
#else
SoftwareSerial BTChan = SoftwareSerial(BT_RECV_PIN, BT_SEND_PIN);
#endif

#define SIG0 0x55
#define SIG1 0xaa
struct globalData 
{
  uint8_t signature[2]; 

  uint16_t scrollSpeed; 
  uint16_t scrollPause; 

  uint8_t effectI;      
  uint8_t effectO;      
  uint8_t align;        

  uint8_t intensity;    
  bool bInvert;         

  char msg[BUF_SIZE+1]; 
} G;

char newMessage[BUF_SIZE+1] = { '\0' };
bool newMessageAvailable = false;
bool newConfigAvailable = false;


void(*hwReset) (void) = 0; 

void writeGlobal(void)
{
  PRINTS("\nSaving Global");
  EEPROM.put(EEPROM_START_ADDR, G);
}

void readGlobal(bool bInit = false)
{
  PRINTS("\nLoading Global");
  EEPROM.get(EEPROM_START_ADDR, G);

  if (bInit || G.signature[0] != SIG0 || G.signature[1] != SIG1)

  {
    PRINTS("\nInitialising Global");
    G.signature[0] = SIG0;
    G.signature[1] = SIG1;
    G.scrollSpeed = 25;
    G.scrollPause = 2000;
    G.effectI = G.effectO = 0;
    G.align = 1;
    G.intensity = 7;
    G.bInvert = false;
    strcpy(G.msg, "Setup");

    writeGlobal();
  }

  newConfigAvailable = true;
}

bool BT_getATCmd(char* szBuf, uint8_t lenBuf, bool fReset = true)

{
  static uint16_t cmdIdx;

  if (fReset) cmdIdx = 0;

  strncpy_P(szBuf, ATCmd + cmdIdx, lenBuf);
  cmdIdx += (strlen_P(ATCmd + cmdIdx) + 1);

  return(pgm_read_byte(ATCmd + cmdIdx) == '\0');
}

bool BT_getATResponse(char* resp, uint8_t lenBuf)

{
  const uint16_t RESP_TIMEOUT = 500;

  uint32_t timeStart = millis();
  char c = '\0';
  uint8_t len = 0;

  *resp = '\0';
  while ((millis() - timeStart < RESP_TIMEOUT) && (c != '\n') && (len < lenBuf))
  {
    if (BTChan.available())
    {
      c = BTChan.read();
      *resp++ = c;
      *resp = '\0';
      len++;
    }
  }

  return(len != '\0');
}

void BT_sendACK(char resp)

{
  static char msg[] = { VT_START, VT_CMD_ACK, VT_ERR_OK, VT_END, '\n', '\0' };
  msg[2] = resp;
  PRINT("\nResp: ", msg);
  BTChan.print(msg);
  BTChan.flush();
}

void BT_begin(void)

{
  const uint16_t BAUD = 9600;
  char  szCmd[20], szResp[16];
  uint8_t   i = 0;
  bool  fLast = false;

  PRINT("\nStart BT connection at ", BAUD);
  BTChan.begin(BAUD);


  do
  {
    fLast = BT_getATCmd(szCmd, ARRAY_SIZE(szCmd), (i == 0));

    char *sz = (char *)malloc((strlen(szStart) + strlen_P(szCmd) + \
                strlen(BT_NAME) + strlen(szEnd) + 1) * sizeof(char));
    strcpy(sz, szStart);
    strcat(sz, szCmd);
    if (i == 0)  
      strcat(sz, BT_NAME);
    strcat(sz, szEnd);
    BTChan.print(sz);
    BTChan.flush();

    free(sz);
    i++;
    if (!fLast)
    {
      if (!BT_getATResponse(szResp, ARRAY_SIZE(szResp)))
      {
        PRINT("\nBT err on ", szCmd);
        PRINT(":", szResp);
      }
    }
  } while (!fLast);

  BTChan.flush();
}

uint8_t BT_executeCommand(uint8_t cmd, char *pd)
{
  uint8_t sts = VT_ERR_OK;  

  PRINT("\nexecuting ", (char)cmd);
  PRINT(" with '", pd);
  PRINTS("'");

  switch (cmd)
  {
  case VT_CMD_RESET:
    hwReset();
    break;

  case VT_CMD_FACSET:
    readGlobal(true);
    PRINTS("\nCMD Factory Settings");
    break;

  case VT_CMD_BRIGHT:
    G.intensity = (G.intensity + 1) % (MAX_INTENSITY + 1);
    PRINT("\nCMD Brightness ", G.intensity);
    break;

  case VT_CMD_IANIM:
    G.effectI = (G.effectI + 1) % ARRAY_SIZE(textEffect);
    PRINT("\nCMD In Animation ", G.effectI);
    break;

  case VT_CMD_JUSTIFY:
    G.align = (G.align + 1) % ARRAY_SIZE(textPosition);
    PRINT("\nCMD Text Align ", G.align);
    break;

  case VT_CMD_SAVE:
    writeGlobal();
    PRINTS("\nCMD Save");
    break;

  case VT_CMD_MESSAGE:
    strcpy(newMessage, pd);
    newMessageAvailable = true;
    PRINT("\nCMD Message '", newMessage); PRINTS("'");
    break;

  case VT_CMD_SPEED:
  case VT_CMD_TPAUSE:
  {
      int16_t v = atoi(pd);

      //if (v < 0 || v > 10000)
        //sts = VT_ERR_DATA;
      //else
      //{
        if (cmd == VT_CMD_SPEED)
        {
          G.scrollSpeed = v;
          PRINT("\nCMD Speed ", v);
        }
        else
        {
          G.scrollPause = v;
          PRINT("\nCMD Pause ", v);
        }
      }
    }
//    break;

 // default:
  //  sts = VT_ERR_CMD;
   // PRINT("CMD Error - ", cmd);
  //  break;
  }

  //newConfigAvailable = (sts == VT_ERR_OK && cmd != VT_CMD_MESSAGE);

  //return(sts);
//}

void BT_getCommand(void)

{
  static enum { ST_IDLE, ST_CMD, ST_DATA, ST_END } state = ST_IDLE;
  static uint32_t timeStart = 0;
  static char cBuf[BUF_SIZE+1];
  static uint16_t countBuf;
  static char cmd = '\0';
  static bool prevEsc, inEsc = false;

  if (state != ST_IDLE)
  {
    if (millis() - timeStart >= BT_COMMS_TIMEOUT)
    {
      BT_sendACK(VT_ERR_TOUT);
      timeStart = 0;
      state = ST_IDLE;
    }
  }

 
  if (BTChan.available())
  {
    char ch = BTChan.read();

  
    prevEsc = inEsc;
    inEsc = (ch == VT_ESC && !prevEsc);

 
    switch (state)
    {
    case ST_IDLE:  
      if (!prevEsc && ch == VT_START)
      {
        PRINT("\nPkt Srt ", ch);
        state = ST_CMD;
        cmd = cBuf[0] = '\0';
        timeStart = millis();
        countBuf = 0;
      }
      break;

    case ST_CMD:  
      cmd = ch;   
      PRINT("\nPkt Cmd ", cmd);

      switch (ch)
      {
      case VT_CMD_RESET:
      case VT_CMD_FACSET:
      case VT_CMD_BRIGHT:
      case VT_CMD_IANIM:
      case VT_CMD_JUSTIFY:
      case VT_CMD_SAVE:
      case VT_CMD_MESSAGE:
      case VT_CMD_SPEED:
      case VT_CMD_TPAUSE:
        state = ST_DATA;
        break;

      default:
        BT_sendACK(VT_ERR_CMD);
        cmd = '\0';
        state = ST_IDLE;
        break;
      }
      break;

   // case ST_DATA:  
      //if (countBuf >= BUF_SIZE) 
     // {
     //  PRINTS("\nBuffer overflow");
     //   BT_sendACK(VT_ERR_DATA);
     //   state = ST_IDLE;
     // }
    //  else if (ch == VT_END && !prevEsc) 
     // {
     //   PRINT("\nPkt end @", countBuf);
      //  cBuf[countBuf] = '\0'; 
      //  BT_sendACK(BT_executeCommand(cmd, cBuf));
      //  state = ST_IDLE;
     // }
    //  else if (!inEsc) 
    //  {
    //    PRINT("\nPkt cBuf[", countBuf); PRINT("]:", ch);
     //   cBuf[countBuf++] = ch;
    //  }
   //   break;

    //default:  
      //state = ST_IDLE;
      //BT_sendACK(VT_ERR_SEQ);
     // break;
    }
  }
}

void setup()
{
#if DEBUG
  Serial.begin(57600);
#endif
  PRINTS("\n[Parola_BT_Control Debug]");

  readGlobal();

  P.begin();
  P.displayClear();
  
  BT_begin();
}

void loop()
{
 
  BT_getCommand();

  
  if (newConfigAvailable)
  {
    PRINTS("\nSetting new config");
    P.setSpeed(G.scrollSpeed);
    P.setPause(G.scrollPause);
    P.setTextEffect(textEffect[G.effectI], textEffect[G.effectO]);
    P.setTextAlignment(textPosition[G.align]);
    P.setIntensity(G.intensity);
    P.setInvert(G.bInvert);
    P.setTextBuffer(G.msg);
    P.displayReset();

    newConfigAvailable = false;
  }

  if (newMessageAvailable)
  {
    PRINTS("\nSetting new message");
    strcpy(G.msg, newMessage);
    P.displayReset();

    newMessageAvailable = false;
  }

 
  if (P.displayAnimate())
    P.displayReset();
}

